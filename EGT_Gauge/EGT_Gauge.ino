#include <Adafruit_SSD1306.h>
#include <Adafruit_GFX.h>
#include <MAX6675.h>
#include <SPI.h>
#include <Wire.h>


/*
  Single_Temp.pde - Example using the MAX6675 Library.
  Created by Ryan McLaughlin <ryanjmclaughlin@gmail.com>
*/

#define OLED_RESET 4
Adafruit_SSD1306 display(OLED_RESET);

static const unsigned char PROGMEM turbo16_glcd_bmp[] =
{B01111111, B11100000,
B01111110, B10110000,
B01111100, B10011000,
B01111010, B10101100,
B00010001, B11000100,
B00011111, B01111100,
B00010001, B11000100,
B00011010, B10101111,
B00001100, B10011111,
B00000110, B10111111,
B00000011, B11111111,
B11101111, B11111111,
B10011011, B01100010,
B11101011, B01111010,
B10011011, B01001010,
B11111111, B11111010 };
static const unsigned char PROGMEM turboIcon_32x22[] = 
{ B00111111, B11111111, B11111100, B00000000,
  B00111111, B11111111, B11111100, B00000000,
  B00111111, B11111100, B11001111, B00000000,
  B00111111, B11111100, B11001111, B00000000,
  B00111111, B11110000, B11000011, B11000000,
  B00111111, B11110000, B11000011, B11000000,
  B00111111, B11001100, B11001100, B11110000,
  B00111111, B11001100, B11001100, B11110000,
  B00000011, B00000011, B11110000, B00110000,
  B00000011, B00000011, B11110000, B00110000,
  B00000011, B11111111, B00111111, B11110000,
  B00000011, B11111111, B00111111, B11110000,
  B00000011, B00000011, B11110000, B00110000,
  B00000011, B00000011, B11110000, B00110000,
  B00000011, B11001100, B11001100, B11111111,
  B00000011, B11001100, B11001100, B11111111,
  B00000000, B11110000, B11000011, B11111111,
  B00000000, B11110000, B11000011, B11111111,
  B00000000, B00111100, B11001111, B11111111,
  B00000000, B00111100, B11001111, B11111111,
  B00000000, B00001111, B11111111, B11111111,
  B00000000, B00001111, B11111111, B11111111
};
static const unsigned char PROGMEM flameIcon_32x22 [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00,
0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x90, 0x00, 0x00, 0x03, 0xCC, 0x00, 0x00, 0x03, 0xC6, 0x00,
0x00, 0x07, 0xF7, 0x00, 0x00, 0x0F, 0xF7, 0x80, 0x00, 0x1F, 0xF7, 0xC0, 0x00, 0x3F, 0xE7, 0xC0,
0x00, 0xFF, 0xEF, 0xC0, 0x01, 0xFF, 0x9F, 0xC0, 0x03, 0xFF, 0x7F, 0x80, 0x03, 0xFD, 0xFF, 0x00,
0x03, 0xF3, 0xFE, 0x00, 0x03, 0xE7, 0xFC, 0x00, 0x03, 0xF3, 0xF0, 0x00, 0x01, 0xF9, 0xF0, 0x00,
0x00, 0x79, 0xF8, 0x00, 0x00, 0x1C, 0xFC, 0x00, 
};
static const unsigned char PROGMEM turboIcon_32x32[] = 
{ B00111111, B11111111, B11111100, B00000000,
  B00111111, B11111111, B11111100, B00000000,
  B00111111, B11111100, B11001111, B00000000,
  B00111111, B11111100, B11001111, B00000000,
  B00111111, B11110000, B11000011, B11000000,
  B00111111, B11110000, B11000011, B11000000,
  B00111111, B11001100, B11001100, B11110000,
  B00111111, B11001100, B11001100, B11110000,
  B00000011, B00000011, B11110000, B00110000,
  B00000011, B00000011, B11110000, B00110000,
  B00000011, B11111111, B00111111, B11110000,
  B00000011, B11111111, B00111111, B11110000,
  B00000011, B00000011, B11110000, B00110000,
  B00000011, B00000011, B11110000, B00110000,
  B00000011, B11001100, B11001100, B11111111,
  B00000011, B11001100, B11001100, B11111111,
  B00000000, B11110000, B11000011, B11111111,
  B00000000, B11110000, B11000011, B11111111,
  B00000000, B00111100, B11001111, B11111111,
  B00000000, B00111100, B11001111, B11111111,
  B00000000, B00001111, B11111111, B11111111,
  B00000000, B00001111, B11111111, B11111111,
  B00000000, B00000000, B00000000, B00000000,
  B11111100, B11111111, B11111111, B11111111,
  B11111100, B11111111, B11111111, B11111111,
  B11000011, B11001111, B00111100, B00001100,
  B11000011, B11001111, B00111100, B00001100,
  B11111100, B11001111, B00111111, B11001100,
  B11111100, B11001111, B00111111, B11001100,
  B11000011, B11001111, B00110000, B11001100,
  B11000011, B11001111, B00110000, B11001100,
  B11111111, B11111111, B11111111, B11001100 
};

static const unsigned char PROGMEM dowsterIcon_128x32 [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x3F, 0xFC, 0x07, 0xFF, 0x1E, 0x1E, 0x1E, 0x3F, 0xF8, 0xFF, 0xFD, 0xFF, 0xC7, 0xFF, 0xC0,
0x00, 0x3F, 0xFE, 0x1F, 0xFF, 0x9E, 0x1E, 0x1E, 0xFF, 0xFC, 0xFF, 0xFD, 0xFF, 0xC7, 0xFF, 0xE0,
0x00, 0x3F, 0xFE, 0x1F, 0xFF, 0x9E, 0x3E, 0x3C, 0xFF, 0xFC, 0xFF, 0xFD, 0xFF, 0xC7, 0xFF, 0xE0,
0x00, 0x7F, 0xFE, 0x3F, 0xFF, 0x1E, 0x3E, 0x3D, 0xFF, 0xF9, 0xFF, 0xFB, 0xFF, 0x8F, 0xFF, 0xC0,
0x00, 0x78, 0x3E, 0x3C, 0x0F, 0x1E, 0x3C, 0x79, 0xE0, 0x78, 0x0F, 0x03, 0xC0, 0x0F, 0x03, 0xC0,
0x00, 0x78, 0x1E, 0x3C, 0x0F, 0x3C, 0x7C, 0x79, 0xE0, 0x78, 0x0F, 0x03, 0xC0, 0x0F, 0x03, 0xC0,
0x00, 0xF0, 0x3C, 0x78, 0x1E, 0x3C, 0x7C, 0xF3, 0xC0, 0xF0, 0x1E, 0x07, 0x80, 0x1E, 0x07, 0x80,
0x00, 0xF0, 0x3C, 0x78, 0x1E, 0x3C, 0xFC, 0xF3, 0xC0, 0xF0, 0x1E, 0x07, 0x80, 0x1E, 0x07, 0x80,
0x00, 0xF0, 0x3C, 0x78, 0x1E, 0x3C, 0xF8, 0xE3, 0xC0, 0xF0, 0x1E, 0x07, 0x80, 0x1E, 0x07, 0x80,
0x01, 0xE0, 0x78, 0xF0, 0x3C, 0x3C, 0xF9, 0xE7, 0xC0, 0x00, 0x3C, 0x0F, 0x00, 0x3C, 0x0F, 0x00,
0x01, 0xE0, 0x78, 0xF0, 0x3C, 0x79, 0xF9, 0xC3, 0xE0, 0x00, 0x3C, 0x0F, 0x00, 0x3C, 0x0F, 0x00,
0x01, 0xE0, 0x78, 0xF0, 0x3C, 0x79, 0xF3, 0xC3, 0xF0, 0x00, 0x3C, 0x0F, 0xFC, 0x3C, 0x0F, 0x00,
0x03, 0xC0, 0xF1, 0xE0, 0x78, 0x7B, 0xF3, 0x81, 0xF8, 0x00, 0x78, 0x1F, 0xF8, 0x7B, 0xFE, 0x00,
0x03, 0xC0, 0xF1, 0xE0, 0x78, 0x7B, 0xF7, 0x80, 0xF8, 0x00, 0x78, 0x1F, 0xF8, 0x7B, 0xFC, 0x00,
0x03, 0xC0, 0xF1, 0xE0, 0x78, 0x73, 0x77, 0x80, 0x7C, 0x00, 0x78, 0x1F, 0xF8, 0x7B, 0xE0, 0x00,
0x07, 0x81, 0xE3, 0xC0, 0xF0, 0xF7, 0x6F, 0x00, 0x7E, 0x00, 0xF0, 0x3C, 0x00, 0xF3, 0xE0, 0x00,
0x07, 0x81, 0xE3, 0xC0, 0xF0, 0xF6, 0x6F, 0x00, 0x3F, 0x00, 0xF0, 0x3C, 0x00, 0xF3, 0xE0, 0x00,
0x07, 0x81, 0xE3, 0xC0, 0xF0, 0xFE, 0xFE, 0x00, 0x1F, 0x00, 0xF0, 0x3C, 0x00, 0xF3, 0xE0, 0x00,
0x0F, 0x03, 0xC7, 0x81, 0xE0, 0xFC, 0xFE, 0x00, 0x0F, 0x01, 0xE0, 0x78, 0x01, 0xE3, 0xE0, 0x00,
0x0F, 0x03, 0xC7, 0x81, 0xE0, 0xFC, 0xFC, 0x3C, 0x0F, 0x01, 0xE0, 0x78, 0x01, 0xE3, 0xE0, 0x00,
0x0F, 0x03, 0xC7, 0x81, 0xE1, 0xF8, 0xFC, 0x3C, 0x0F, 0x01, 0xE0, 0x78, 0x01, 0xE3, 0xE0, 0x00,
0x1E, 0x07, 0x8F, 0x03, 0xC1, 0xF9, 0xF8, 0x78, 0x1E, 0x03, 0xC0, 0xF0, 0x03, 0xC3, 0xE0, 0x00,
0x1E, 0x07, 0x8F, 0x03, 0xC1, 0xF9, 0xF8, 0x78, 0x1E, 0x03, 0xC0, 0xF0, 0x03, 0xC3, 0xE0, 0x00,
0x1E, 0x0F, 0x8F, 0x03, 0xC1, 0xF1, 0xF0, 0x78, 0x1E, 0x03, 0xC0, 0xF0, 0x03, 0xC1, 0xE0, 0x00,
0x3F, 0xFF, 0x1F, 0xFF, 0x81, 0xF1, 0xF0, 0xFF, 0xFC, 0x07, 0x81, 0xFF, 0xC7, 0x81, 0xE0, 0x00,
0x3F, 0xFE, 0x1F, 0xFF, 0x83, 0xE1, 0xE0, 0xFF, 0xFC, 0x07, 0x81, 0xFF, 0xC7, 0x81, 0xE0, 0x00,
0x3F, 0xFC, 0x1F, 0xFF, 0x03, 0xE3, 0xE0, 0xFF, 0xF8, 0x07, 0x81, 0xFF, 0xC7, 0x81, 0xE0, 0x00,
0x7F, 0xF0, 0x0F, 0xFE, 0x03, 0xC3, 0xC0, 0x7F, 0xF0, 0x0F, 0x03, 0xFF, 0x8F, 0x01, 0xE0, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

int pinCS0 = 11;         // CS pin on MAX6675
int pinSO = 13;          // SO pin of MAX6675
int pinSCK = 12;         // SCK pin of MAX6675
int units = 2;        // Units to readout temp (0 = ÀöF, 1 = ÀöC)
float error = 0.0;    // Temperature compensation error
float temp_out = 0.0; // Temperature output varible

//Pressure Sensor Constants
const float pressureOffset = 41.0;
const float pressureConversionValue = 28.141;

int absolutePressureSensorPin = 0;
float absolutePressure = 0.0;

MAX6675 temp0(pinCS0,pinSO,pinSCK,units);

void setup() {
  Serial.begin(9600);
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  StartupSequence();
  delay(2000);
  pinMode(9, OUTPUT);
}

void loop() {
  temp_out = temp0.read_temp();  // Read the temp 5 times and return the average value to the var
  absolutePressure = analogRead(absolutePressureSensorPin) / pressureConversionValue - 12;
  absolutePressure = 69;
  display.clearDisplay();
  
  
  String boost = "";
  if(0 < absolutePressure  && absolutePressure < 10) boost += "0";
  boost += (int)absolutePressure;
  boost += "PSI";
  
  String analog = "";
  analog += analogRead(absolutePressureSensorPin);
  analog += "au";
  /*
  String egt = "";
  egt += (int)((temp_out - 30)/2);
  egt += "C";
  */
  
  display.setTextSize(3);
  display.setTextColor(WHITE);
  display.setCursor(0,0);
  
  WriteString(display, boost);
  display.println(); 
  //WriteString(display, egt);
  //display.println();
  
  display.drawBitmap(96,0,turboIcon_32x22, 32, 22, 1, 0);
  display.drawBitmap(96,24,flameIcon_32x22, 32, 22, 1, 0);
  
  display.display();
  
  
  analogWrite(9, absolutePressure < 25 ? absolutePressure : 255);
  delay(5);
}

void StartupSequence() {
  display.clearDisplay();
  display.drawBitmap(0,0,dowsterIcon_128x32, 128, 32, 1, 0);
  display.drawBitmap(44,32,turboIcon_32x32, 32, 32, 1, 0);
  display.display();
}

void WriteString(Adafruit_SSD1306 display, String string) {
  int len = string.length();
  for(int i = 0; i < len; i++) {
    display.write(string.charAt(i));
  }
}
